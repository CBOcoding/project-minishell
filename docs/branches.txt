Step pratici per usare i Branch
ðŸ”¹ðŸ”¹ Creare una branch
git checkout -b nome-branch

Esempio:
git checkout -b login-feature

ðŸ”¹ Lavorare su quella branch
Fai le modifiche âžœ salvale con:
git add .
git commit -m "Messaggio chiaro su cosa hai fatto"

Poi inviala su GitHub:
git push origin nome-branch

ðŸ”¹ Creare una Pull Request
Vai su GitHub âžœ repository âžœ vedrai un pulsante "Compare & pull request".
Cliccalo âžœ scrivi una descrizione âžœ clicca Create pull request.
Il collaboratore puÃ² controllare il codice, lasciare commenti, e poi fare merge.

ðŸ”¹ðŸ”¹Se la branch giÃ¡ esiste:
Recupera le branch remote:
git fetch origin

Passa alla branch:
git checkout feature/login-form

Fai le modifiche âžœ salva âžœ fai push:
git add .
git commit -m "continua lavoro login form"
git push origin feature/login-form

ðŸ”¹ðŸ”¹Se vuoi lavorare da entrambe le macchine a turno
Ogni volta che cambi dispositivo, ti consiglio:
git checkout feature/login-form
git pull origin feature/login-form
CosÃ¬ sincronizzi lâ€™ultima versione della branch prima di iniziare.

ðŸ”¹ðŸ”¹ Tenere la propria branch aggiornata
Mentre lavori, il ramo main puÃ² cambiare. Per stare aggiornato:
git checkout main
git pull origin main
git checkout nome-branch
git merge main

CosÃ¬ prendi gli aggiornamenti e risolvi eventuali conflitti prima di fare la pull request.

Schema-riepilogo
Azione									Comando
Vedi tutte le branch remote				git branch -r
Scarica branch da GitHub				git fetch origin
Passa a branch esistente				git checkout nome-branch
Crea nuova branch						git checkout -b nome-branch
Invia la tua branch a GitHub			git push origin nome-branch
Sincronizza branch prima di lavorare	git pull origin nome-branch
